#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

int *array;               // Dynamic array for storing data
long long *partial_sums;  // Array for storing partial sums (Data Parallelism)
int array_size;
int num_threads;

// Function for Data Parallelism: Compute sum of chunks
void* compute_sum(void* arg) {
    int thread_id = (int)arg;
    int start = thread_id * (array_size / num_threads);
    int end = (thread_id == num_threads - 1) ? array_size : start + (array_size / num_threads);

    partial_sums[thread_id] = 0;
    for (int i = start; i < end; i++) {
        partial_sums[thread_id] += array[i];
    }

    printf("Thread %d: Calculated partial sum = %lld\n", thread_id, partial_sums[thread_id]);
    return NULL;
}

// Function for Task Parallelism: Compute total sum
void* compute_total_sum(void* arg) {
    long long* sum_result = (long long*)arg;
    *sum_result = 0;
    for (int i = 0; i < array_size; i++) {
        *sum_result += array[i];
    }
    return NULL;
}

// Function for Task Parallelism: Find maximum value
void* find_maximum(void* arg) {
    long long* max_result = (long long*)arg;
    *max_result = array[0];
    for (int i = 1; i < array_size; i++) {
        if (array[i] > *max_result) {
            *max_result = array[i];
        }
    }
    return NULL;
}

// Function for Task Parallelism: Find minimum value
void* find_minimum(void* arg) {
    long long* min_result = (long long*)arg;
    *min_result = array[0];
    for (int i = 1; i < array_size; i++) {
        if (array[i] < *min_result) {
            *min_result = array[i];
        }
    }
    return NULL;
}

// Function for Task Parallelism: Sort array in ascending order
void* sort_ascending(void* arg) {
    int* sorted_array = (int*)arg;

    for (int i = 0; i < array_size; i++) {
        sorted_array[i] = array[i];
    }

    for (int i = 0; i < array_size - 1; i++) {
        for (int j = 0; j < array_size - i - 1; j++) {
            if (sorted_array[j] > sorted_array[j + 1]) {
                int temp = sorted_array[j];
                sorted_array[j] = sorted_array[j + 1];
                sorted_array[j + 1] = temp;
            }
        }
    }

    printf("Ascending order: ");
    for (int i = 0; i < array_size; i++) {
        printf("%d ", sorted_array[i]);
    }
    printf("\n");

    return NULL;
}

// Function for Task Parallelism: Sort array in descending order
void* sort_descending(void* arg) {
    int* sorted_array = (int*)arg;

    for (int i = 0; i < array_size; i++) {
        sorted_array[i] = array[i];
    }

    for (int i = 0; i < array_size - 1; i++) {
        for (int j = 0; j < array_size - i - 1; j++) {
            if (sorted_array[j] < sorted_array[j + 1]) {
                int temp = sorted_array[j];
                sorted_array[j] = sorted_array[j + 1];
                sorted_array[j + 1] = temp;
            }
        }
    }

    printf("Descending order: ");
    for (int i = 0; i < array_size; i++) {
        printf("%d ", sorted_array[i]);
    }
    printf("\n");

    return NULL;
}

int main() {
    int choice;

    // Ask the user for the array size
    printf("Enter the size of the array: ");
    scanf("%d", &array_size);

    // Ask the user for the number of threads
    printf("Enter the number of threads: ");
    scanf("%d", &num_threads);

    // Dynamically allocate memory for the array and partial sums
    array = (int*)malloc(array_size * sizeof(int));
    partial_sums = (long long*)malloc(num_threads * sizeof(long long));

    // Initialize the array with random numbers
    printf("\nArray elements:\n");
    for (int i = 0; i < array_size; i++) {
        array[i] = rand() % 100;  // Random numbers between 0 and 99
        printf("%d ", array[i]);  // Print each element
    }
    printf("\n");

    // Present the options to the user
    printf("\nSelect an operation to perform:\n");
    printf("1. Data Parallelism (Compute Sum)\n");
    printf("2. Task Parallelism (Compute Sum, Maximum, Minimum, Sorting)\n");
    printf("Enter your choice (1 or 2): ");
    scanf("%d", &choice);

    if (choice == 1) {
        // Perform Data Parallelism
        printf("\nPerforming Data Parallelism...\n");
        pthread_t threads[num_threads];
        int thread_ids[num_threads];

        // Create threads for data parallelism
        for (int i = 0; i < num_threads; i++) {
            thread_ids[i] = i;
            pthread_create(&threads[i], NULL, compute_sum, &thread_ids[i]);
        }

        // Wait for all threads to complete
        for (int i = 0; i < num_threads; i++) {
            pthread_join(threads[i], NULL);
        }

        // Combine the partial sums
        long long total_sum = 0;
        for (int i = 0; i < num_threads; i++) {
            total_sum += partial_sums[i];
        }

        printf("Total sum of array: %lld\n", total_sum);

    } else if (choice == 2) {
        // Perform Task Parallelism
        printf("\nPerforming Task Parallelism...\n");
        pthread_t sum_thread, max_thread, min_thread, asc_thread, desc_thread;
        long long sum_result, max_result, min_result;
        int sorted_array[array_size];

        // Create threads for task parallelism
        pthread_create(&sum_thread, NULL, compute_total_sum, &sum_result);
        pthread_create(&max_thread, NULL, find_maximum, &max_result);
        pthread_create(&min_thread, NULL, find_minimum, &min_result);
        pthread_create(&asc_thread, NULL, sort_ascending, sorted_array);
        pthread_create(&desc_thread, NULL, sort_descending, sorted_array);

        // Wait for all threads to complete
        pthread_join(sum_thread, NULL);
        pthread_join(max_thread, NULL);
        pthread_join(min_thread, NULL);
        pthread_join(asc_thread, NULL);
        pthread_join(desc_thread, NULL);

        printf("Sum of array: %lld\n", sum_result);
        printf("Maximum value in array: %lld\n", max_result);
        printf("Minimum value in array: %lld\n", min_result);

    } else {
        printf("Invalid choice. Exiting program.\n");
    }

    // Free allocated memory
    free(array);
    free(partial_sums);

    return 0;
}
